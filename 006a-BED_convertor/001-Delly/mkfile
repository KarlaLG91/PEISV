## DESCRIPTION:
## mk module for the conversion of files in VCF format generated with SvABA into a BED-like format.
## The script edits the VCF file to comply with the structure of a BED file format.
##
## USAGE:
## Alternative 1: Single target execution.
##      `mk <SPECIFIC_TARGET>`; where SPECIFIC_TARGET is any line printed by the `/bin/create-targets` script in this module.
##
## Alternative 2: Multiple target tandem execution.
##      `bin/targets | xargs mk`
##
## AUTHOR:
##      Karla Lozano (klg1219sh@gmail.com), for Winter Genomics (http://www.wintergenomics.com/) - 2018

MKSHELL=/bin/bash

# Converting VCF file to BED format for SV comparison.
results/%_delly.bed:: data/%.vcf
	set -x
	mkdir -p $(dirname $target)
## For DEL, DUP, INV.
	awk '{OFS="\t"; if (!/^#/){print $1,$2-1}}' $prereq > results/$stem.txt.build \
        && mv results/$stem.txt.build results/$stem.txt
	awk '{OFS="\t"; if (!/^#/){print $8}}' $prereq > results/$stem"1".txt.build \
        && mv results/$stem"1".txt.build results/$stem"1".txt
	awk -F ";" '{print $5, $2}' results/$stem"1".txt | sed -e "s#END=##g" -e "s#SVTYPE=##g" > results/$stem"2".txt.build \
	&& mv results/$stem"2".txt.build results/$stem"2".txt
	paste results/$stem.txt results/$stem"2".txt > results/$stem"3".txt.build \
        && mv results/$stem"3".txt.build results/$stem"3".txt
	awk 'BEGIN{print "chr\tstart\tend\tsv_type"}{print $1"\t"$2"\t"$3"\t"$4}' results/$stem"3".txt > $target.build \
	&& mv $target.build $target
## To separate depending on SV type
	grep "DEL" $target | awk '{print $1"\t"$2"\t"$3}' > results/$stem"_delly_deletions".bed.build \
	&& mv results/$stem"_delly_deletions".bed.build results/$stem"_delly_deletions".bed
	grep "INV" $target | awk '{print $1"\t"$2"\t"$3}' > results/$stem"_delly_inversions".bed.build \
        && mv results/$stem"_delly_inversions".bed.build results/$stem"_delly_inversions".bed
	grep "DUP" $target | awk '{print $1"\t"$2"\t"$3}' > results/$stem"_delly_duplications".bed.build \
        && mv results/$stem"_delly_duplications".bed.build results/$stem"_delly_duplications".bed
	rm results/*.txt

## For INS
#	grep SVTYPE=BND $prereq > results/$stem.txt.build \
#	&& mv results/$stem.txt.build results/$stem.txt
#        awk '{OFS="\t"; if (!/^#/){print $1,$2-1,$2+1000}}' results/$stem.txt > results/$stem"0".txt.build \
#        && mv results/$stem"0".txt.build results/$stem"0".txt
#        awk '{OFS="\t"; if (!/^#/){print $8}}' results/$stem.txt > results/$stem"1".txt.build \
#        && mv results/$stem"1".txt.build results/$stem"1".txt
#        awk -F ";" '{print $4,$5}' results/$stem"1".txt | sed -e "s#CHR2=##g" -e "s#END=##g" > results/$stem"2".txt.build \
#        && mv results/$stem"2".txt.build results/$stem"2".txt
#        paste results/$stem"0".txt results/$stem"2".txt > results/$stem"3".txt.build \
#        && mv results/$stem"3".txt.build results/$stem"3".txt
#        awk 'BEGIN{print "chr\tstart1\tend1\tchr2\tstart2\tend2"}{print $1"\t"$2"\t"$3"\t"$4"\t"$5-1"\t"$5+1000}' results/$stem"3".txt > $target.build \
#        && mv $target.build $target
#        rm results/*.txt


## For TRANSLOCATIONS size can't be defined


### Add a "clean" recipe to quickly remove results directory
clean:V:
	rm -r results/
